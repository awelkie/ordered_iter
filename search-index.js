var searchIndex = {};
searchIndex['ordered_iter'] = {"items":[[0,"","ordered_iter","Ordered iterators."],[3,"InnerJoinMapIterator","",""],[3,"InnerJoinMapSetIterator","",""],[3,"InnerJoinSetIterator","",""],[3,"OuterJoinIterator","",""],[8,"OrderedMapIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a map like structure"],[16,"Key","ordered_iter::OrderedMapIterator",""],[16,"Val","",""],[11,"inner_join_map","ordered_iter","join two ordered maps together",0],[11,"inner_join_set","","filter an ordered map with an ordered set",0],[11,"outer_join","","Join an ordered iterator with the right ordered iterator. The\nnew iterator will return a key value pair for every key in\neither iterator. If a key is present in both iterators they\nwill be returned together (two values). If a value is in the Right,\nbut not the left iterator it will be return without the value in the\nleft iterator. If the value is in the left iterator by not the right\nthat will be return without the value from the left iterator.",0],[8,"OrderedSetIterator","","Allows an iterator to be do an inner join with another\niterator to combine their values or filter based on their keys.\nthis trait is applied to an iterator over a set like structure"],[11,"inner_join_map","","join two ordered maps together",1],[11,"inner_join_set","","filter an ordered map with an ordered set",1],[6,"Item","",""],[11,"next","","",2],[6,"Item","",""],[11,"next","","",3],[6,"Item","",""],[11,"next","","",4],[6,"Item","",""],[11,"next","","",5],[6,"Key","",""],[6,"Val","",""],[6,"Key","",""],[6,"Val","",""],[6,"Key","",""],[6,"Val","",""],[6,"Key","",""],[6,"Val","",""]],"paths":[[8,"OrderedMapIterator"],[8,"OrderedSetIterator"],[3,"InnerJoinMapIterator"],[3,"InnerJoinSetIterator"],[3,"InnerJoinMapSetIterator"],[3,"OuterJoinIterator"]]};
initSearch(searchIndex);
